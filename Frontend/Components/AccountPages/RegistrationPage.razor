@page "/registration"
@using Frontend.Services.Interfaces
@inject IWebAppHttpClient _httpClient
@inject IValidator _validator

<PageTitle>Registration</PageTitle>

<form>
    <h5 class="card-title">Registration</h5>
    <div class="mb-3">
        <label for="inputName" class="form-label">Name</label>
        <input type="text" class="form-control" id="inputName" name="Name" placeholder="Enter your name" required @bind="@_name">
    </div>
    <div class="mb-3">
        <label for="inputEmail" class="form-label">Email address</label>
        <input type="email" class="form-control" id="inputEmail" name="Email" placeholder="Enter email" required @bind="@_email">
    </div>
    <div class="mb-3">
        <label for="inputPassword" class="form-label">Password</label>
        <input type="password" class="form-control" id="inputPassword" name="Password" placeholder="Password" required @bind="@_password">
    </div>
    <button type="button" class="btn btn-primary" @onclick="Register">Register</button>
    <span class="text-info">@($"{InfoMessage}")</span>
</form>

@code {
    private string _name = string.Empty;
    private string _email = string.Empty;
    private string _password = string.Empty;
    private string InfoMessage = string.Empty;

    private async Task Register()
    {
        try
        {
            var registrationRequest = new RegistrationRequest()
                {
                    Name = _name,
                    Email = _email,
                    Password = _password
                };
            _validator.Validate(registrationRequest);
            var account = await _httpClient.Register(registrationRequest);
            InfoMessage = $"Success. Acc id:({account.Id})";
        }
        catch (Exception)
        {
            InfoMessage = "Failed";
        }
    }
}
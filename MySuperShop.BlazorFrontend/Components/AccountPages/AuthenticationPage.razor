@page "/authentication"
@inject IWebAppHttpClient HttpClient
@inject IValidator Validator
@implements IDisposable
@inject IJSRuntime JSRuntime

<PageTitle>Authentication</PageTitle>

<form>
    <h5 class="card-title">Authentication</h5>
    <div class="mb-3">
        <label for="inputEmail" class="form-label">Email address</label>
        <input type="email" class="form-control w-25" id="inputEmail" name="Email" placeholder="Enter email" required @bind="@_email">
    </div>
    <div class="mb-3">
        <label for="inputPassword" class="form-label">Password</label>
        <input type="password" class="form-control w-25" id="inputPassword" name="Password" placeholder="Password" required @bind="@_password">
    </div>
    <button type="button" class="btn btn-primary" @onclick="Authenticate">Enter</button>
    <span class="text-info">@_infoMessage</span>
</form>

@code {
    private string _email = string.Empty;
    private string _password = string.Empty;
    private string _infoMessage = string.Empty;
    private readonly CancellationTokenSource _cts = new();

    [CascadingParameter]
    protected bool IsAuthenticated { get; set; }
    
    private async Task Authenticate()
    {
        try
        {
            var authRequest = new AuthenticationRequest()
            {
                Email = _email,
                Password = _password
            };
            Validator.Validate<AuthenticationRequest>(authRequest);
            var response = await HttpClient.Authenticate(authRequest, _cts.Token);
            var jwt = response.Jwt;
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "jwt", jwt);
            _infoMessage = $"Success auth.";
            IsAuthenticated = true;
        }
        catch (Exception ex)
        {
            _infoMessage = $"Failed. {ex.Message}";
        }
    }

    public void Dispose()
    {
        _cts.Dispose();
    }

}